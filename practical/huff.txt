import heapq
from collections import defaultdict

class HuffmanNode:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    def __lt__(self, other):
        return self.freq < other.freq

def calculate_frequency(data):
    frequency = defaultdict(int)
    for char in data:
        frequency[char] += 1
    return frequency

def build_huffman_tree(frequency):
    heap = [HuffmanNode(char, freq) for char, freq in frequency.items()]
    heapq.heapify(heap)
    
    while len(heap) > 1:
        node1 = heapq.heappop(heap)
        node2 = heapq.heappop(heap)
        merged = HuffmanNode(None, node1.freq + node2.freq)
        merged.left = node1
        merged.right = node2
        heapq.heappush(heap, merged)
    
    return heap[0]

def generate_huffman_codes(node, current_code, codes):
    if node is None:
        return
    
    if node.char is not None:
        codes[node.char] = current_code
    
    generate_huffman_codes(node.left, current_code + "0", codes)
    generate_huffman_codes(node.right, current_code + "1", codes)

def huffman_encode(data, codes):
    encoded_data = "".join([codes[char] for char in data])
    return encoded_data

def huffman_decode(encoded_data, root):
    decoded_data = []
    current_node = root
    
    for bit in encoded_data:
        if bit == "0":
            current_node = current_node.left
        else:
            current_node = current_node.right
        
        if current_node.char is not None:
            decoded_data.append(current_node.char)
            current_node = root
    
    return "".join(decoded_data)

def huffman_encoding(data):
    if not data:
        return None, None
    
    frequency = calculate_frequency(data)
    huffman_tree_root = build_huffman_tree(frequency)
    huffman_codes = {}
    generate_huffman_codes(huffman_tree_root, "", huffman_codes)
    encoded_data = huffman_encode(data, huffman_codes)
    
    return encoded_data, huffman_tree_root

if __name__ == "__main__":
    data = "huffman encoding algorithm"
    print("Original Data:", data)
    
    encoded_data, huffman_tree_root = huffman_encoding(data)
    print("Encoded Data:", encoded_data)
    
    if huffman_tree_root:
        decoded_data = huffman_decode(encoded_data, huffman_tree_root)
        print("Decoded Data:", decoded_data)

