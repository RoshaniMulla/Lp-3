import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

from sklearn.cluster import KMeans

from sklearn.preprocessing 
import StandardScaler


# Load the dataset

data = pd.read_csv("Mall_Customers.csv")


# Preview the dataset

print(data.head())


# Select features for clustering (Annual Income and Spending Score)

X = data[['Annual Income (k$)', 'Spending Score (1-100)']]


# Scale the features

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)


# Calculate WCSS (Within-Cluster Sum of Squares) for different values of k
wcss = []
K = range(1, 11) 
 # Try k values from 1 to 10

for k in K:
   
kmeans = KMeans(n_clusters=k, random_state=42)
   
kmeans.fit(X_scaled)
    
wcss.append(kmeans.inertia_)  
# Inertia is the WCSS

# Plot the Elbow Method using
WCSS
plt.figure(figsize=(8, 6))

plt.plot(K, wcss, 'bo-', markersize=8)

plt.xlabel("Number of Clusters (k)")

plt.ylabel("WCSS (Within-Cluster Sum of Squares)")

plt.title("Elbow Method using WCSS")

plt.show()


# Define the optimal number of clusters from the elbow plot (e.g., k=5)
k_optimal = 5


# Apply K-Means with the optimal number of clusters

kmeans_optimal = KMeans(n_clusters=k_optimal, random_state=42)
data['Cluster'] = kmeans_optimal.fit_predict(X_scaled)


# Plot the clusters

plt.figure(figsize=(10, 8))

plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=data['Cluster'], cmap='viridis', s=50, alpha=0.7)

plt.xlabel("Annual Income (scaled)")
plt.ylabel("Spending Score (scaled)")
plt.title(f"Customer Segments (K-Means Clustering with k={k_optimal})")
plt.colorbar(label="Cluster")
plt.show()