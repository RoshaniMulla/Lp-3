# Initialize the board with one Queen placed
def initialize_board(n, row, col):
    board = [[0 for _ in range(n)] for _ in range(n)]
    board[row][col] = 1  # Place the first Queen
    return board

# Check if it's safe to place a Queen at board[row][col]
def is_safe(board, row, col):
    n = len(board)
    # Check this column on the left side
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check upper diagonal on the left side
    for i, j in zip(range(row-1, -1, -1), range(col-1, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check upper diagonal on the right side
    for i, j in zip(range(row-1, -1, -1), range(col+1, n)):
        if board[i][j] == 1:
            return False

    return True

# Use backtracking to solve the 8-Queens problem
def solve_8_queens(board, row):
    n = len(board)
    if row >= n:
        return True  # All Queens are placed

    for col in range(n):
        if is_safe(board, row, col):
            board[row][col] = 1  # Place the Queen
            if solve_8_queens(board, row + 1):
                return True  # Solution found
            board[row][col] = 0  # Backtrack

    return False

# Function to display the board
def print_board(board):
    for row in board:
        print(" ".join("Q" if cell == 1 else "." for cell in row))

# Main function
n = 8  # Size of the board
initial_row, initial_col = 0, 0  # Place the first Queen at (0, 0)
board = initialize_board(n, initial_row, initial_col)

if solve_8_queens(board, initial_row + 1):
    print_board(board)
else:
    print("No solution found")
